<?xml version="1.0" encoding="utf-8" ?>
<Rows xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <!--Int Named Method-->
  <Row>
    <Property>Id</Property>
    <Value>1</Value>
    <Type>System.Int32</Type>
    <Method>Equals</Method>
    <ExpectedExpression>e => e.Id.Equals(1)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 and should equal value 1.</Message>
  </Row>
  <!--Int equals-->
  <Row>
    <Property>Id</Property>
    <Value>1</Value>
    <Type>System.Int32</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Id == 1)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 and should equal value 1.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>2</Value>
    <Type>System.Int32</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Id == 2)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Id is 1 and should not be equal to value 2.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>A</Value>
    <Type>System.Int32</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Id == 0)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>A is an invalid value. It is not 10 in hex unless it has the 0x prefix.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>0xA</Value>
    <Type>System.Int32</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Id == 10)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>0xA is 10. It is valid hex, but not equal to 1.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>Z</Value>
    <Type>System.Int32</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Id == 0)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Z is an invalid value.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>0xZ</Value>
    <Type>System.Int32</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Id == 0)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>0xZ is an invalid value.</Message>
  </Row>
  <!--Int Greater than-->
  <Row>
    <Property>Id</Property>
    <Value>1</Value>
    <Type>System.Int32</Type>
    <Method>gt</Method>
    <ExpectedExpression>e => (e.Id > 1)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Id is 1 which not greater than 1.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>0</Value>
    <Type>System.Int32</Type>
    <Method>gt</Method>
    <ExpectedExpression>e => (e.Id > 0)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 which is greater than 0.</Message>
  </Row>
  <!--Int Greater than or equal to-->
  <Row>
    <Property>Id</Property>
    <Value>2</Value>
    <Type>System.Int32</Type>
    <Method>ge</Method>
    <ExpectedExpression>e => (e.Id >= 2)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Id is 1 which is not greater than 2.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>0</Value>
    <Type>System.Int32</Type>
    <Method>ge</Method>
    <ExpectedExpression>e => (e.Id >= 0)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 which is greater than or equal to 0.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>1</Value>
    <Type>System.Int32</Type>
    <Method>ge</Method>
    <ExpectedExpression>e => (e.Id >= 1)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 which is greater than or equal to 1.</Message>
  </Row>
  <!--Int less than-->
  <Row>
    <Property>Id</Property>
    <Value>1</Value>
    <Type>System.Int32</Type>
    <Method>lt</Method>
    <ExpectedExpression>e => (e.Id &lt; 1)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Id is 1 which not less than 1.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>2</Value>
    <Type>System.Int32</Type>
    <Method>lt</Method>
    <ExpectedExpression>e => (e.Id &lt; 2)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 which is less than 2.</Message>
  </Row>
  <!--Int less than or equal to-->
  <Row>
    <Property>Id</Property>
    <Value>0</Value>
    <Type>System.Int32</Type>
    <Method>le</Method>
    <ExpectedExpression>e => (e.Id &lt;= 0)</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Id is 1 which is not less than or equal to 0.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>2</Value>
    <Type>System.Int32</Type>
    <Method>le</Method>
    <ExpectedExpression>e => (e.Id &lt;= 2)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 which is less than or equal to 2.</Message>
  </Row>
  <Row>
    <Property>Id</Property>
    <Value>1</Value>
    <Type>System.Int32</Type>
    <Method>le</Method>
    <ExpectedExpression>e => (e.Id &lt;= 1)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Id is 1 which is less than or equal to 1</Message>
  </Row>
  <!--String equals -->
  <Row>
    <Property>Name</Property>
    <Value>ABC</Value>
    <Type>System.String</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Name == "ABC")</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Name is "ABC" and should equal value "ABC".</Message>
  </Row>
  <Row>
    <Property>Name</Property>
    <Value>DEF</Value>
    <Type>System.String</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Name == "DEF")</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Name is "ABC" and should not equal value "DEF".</Message>
  </Row>
  <!--String not equals -->
  <Row>
    <Property>Name</Property>
    <Value>ABC</Value>
    <Type>System.String</Type>
    <Method>ne</Method>
    <ExpectedExpression>e => (e.Name != "ABC")</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Name is "ABC" and should equal value "ABC".</Message>
  </Row>
  <Row>
    <Property>Name</Property>
    <Value>DEF</Value>
    <Type>System.String</Type>
    <Method>ne</Method>
    <ExpectedExpression>e => (e.Name != "DEF")</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Name is "ABC" and should not equal value "DEF".</Message>
  </Row>
  <!--DateTime -->
  <Row>
    <Property>Date</Property>
    <Value>01/01/2017</Value>
    <Type>System.DateTime</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Date == {0})</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>The Date is 01/01/2017 and should equal value 01/01/2017.</Message>
  </Row>
  <Row>
    <Property>Date</Property>
    <Value>01/02/2017</Value>
    <Type>System.DateTime</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Date == {0})</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>The Date is 01/01/2017 and should not equal value 01/02/2017.</Message>
  </Row>
  <!--Date Greater than-->
  <Row>
    <Property>Date</Property>
    <Value>01/02/2017</Value>
    <Type>System.DateTime</Type>
    <Method>gt</Method>
    <ExpectedExpression>e => (e.Date > {0})</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Date is 01/01/2017 which is not greater than 01/02/2017.</Message>
  </Row>
  <Row>
    <Property>Date</Property>
    <Value>12/31/2016</Value>
    <Type>System.DateTime</Type>
    <Method>gt</Method>
    <ExpectedExpression>e => (e.Date > {0})</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Date is 01/01/2017 which is greater than 12/31/2016.</Message>
  </Row>
  <!--Date Greater than or equal to-->
  <Row>
    <Property>Date</Property>
    <Value>01/02/2017</Value>
    <Type>System.DateTime</Type>
    <Method>ge</Method>
    <ExpectedExpression>e => (e.Date >= {0})</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Date is 01/01/2017 which is not greater than or equal to 01/02/2017.</Message>
  </Row>
  <Row>
    <Property>Date</Property>
    <Value>12/31/2016</Value>
    <Type>System.DateTime</Type>
    <Method>ge</Method>
    <ExpectedExpression>e => (e.Date >= {0})</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Date is 01/01/2017 which is greater than or equal to 12/31/2016.</Message>
  </Row>
  <Row>
    <Property>Date</Property>
    <Value>01/01/2017</Value>
    <Type>System.DateTime</Type>
    <Method>ge</Method>
    <ExpectedExpression>e => (e.Date >= {0})</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Date is 01/01/2017 which is greater than or equal to 01/01/2017.</Message>
  </Row>
  <!--Date less than-->
  <Row>
    <Property>Date</Property>
    <Value>01/02/2017</Value>
    <Type>System.DateTime</Type>
    <Method>lt</Method>
    <ExpectedExpression>e => (e.Date &lt; {0})</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Date is 01/01/2017 which is less than 01/02/2017.</Message>
  </Row>
  <Row>
    <Property>Date</Property>
    <Value>12/31/2016</Value>
    <Type>System.DateTime</Type>
    <Method>lt</Method>
    <ExpectedExpression>e => (e.Date &lt; {0})</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Date is 01/01/2017 which is not less than 12/31/2016.</Message>
  </Row>
  <!--Date Greater than or equal to-->
  <Row>
    <Property>Date</Property>
    <Value>01/02/2017</Value>
    <Type>System.DateTime</Type>
    <Method>le</Method>
    <ExpectedExpression>e => (e.Date &lt;= {0})</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Date is 01/01/2017 which is less than or equal to 01/02/2017.</Message>
  </Row>
  <Row>
    <Property>Date</Property>
    <Value>12/31/2016</Value>
    <Type>System.DateTime</Type>
    <Method>le</Method>
    <ExpectedExpression>e => (e.Date &lt;= {0})</ExpectedExpression>
    <ExpectedResult>false</ExpectedResult>
    <Message>Date is 01/01/2017 which is not less than or equal to 12/31/2016.</Message>
  </Row>
  <Row>
    <Property>Date</Property>
    <Value>01/01/2017</Value>
    <Type>System.DateTime</Type>
    <Method>le</Method>
    <ExpectedExpression>e => (e.Date &lt;= {0})</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>Date is 01/01/2017 which is less than or equal to 01/01/2017.</Message>
  </Row>

  <!-- Guid -->
  <Row>
    <Property>Guid</Property>
    <Value>{C1AA6176-425D-4981-BE4A-8F5C459E0FF9}</Value>
    <Type>System.Guid</Type>
    <Method>eq</Method>
    <ExpectedExpression>e => (e.Guid == c1aa6176-425d-4981-be4a-8f5c459e0ff9)</ExpectedExpression>
    <ExpectedResult>true</ExpectedResult>
    <Message>The Guid is {C1AA6176-425D-4981-BE4A-8F5C459E0FF9} equal {C1AA6176-425D-4981-BE4A-8F5C459E0FF9}.</Message>
  </Row>
</Rows>